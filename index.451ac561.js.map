{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nconst $09e991522ca7e64e$var$CLASSNAME = Object.freeze({\n    Start: \"start\",\n    Restart: \"restart\",\n    Hidden: \"hidden\",\n    ActionButton: \"button\"\n});\nconst $09e991522ca7e64e$var$LABEL = Object.freeze({\n    Start: \"Start\",\n    Restart: \"Restart\"\n});\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static START_TILES_QUANTITY_DEFAULT = 2;\n    static DEFAULT_BOARD = Array(4).fill().map(()=>Array(4).fill(0));\n    static MOVE_KEYS = Object.freeze([\n        \"ArrowLeft\",\n        \"ArrowRight\",\n        \"ArrowUp\",\n        \"ArrowDown\"\n    ]);\n    static STATUS = Object.freeze({\n        Idle: \"Idle\",\n        Playing: \"Playing\",\n        Lost: \"Lost\",\n        Won: \"Won\"\n    });\n    status = $a5fd07fa01589658$var$Game.STATUS.Idle;\n    score = 0;\n    constructor(initialState = structuredClone($a5fd07fa01589658$var$Game.DEFAULT_BOARD), startTilesAmount = $a5fd07fa01589658$var$Game.START_TILES_QUANTITY_DEFAULT){\n        this.state = initialState;\n        this.startTilesAmount = startTilesAmount;\n    }\n    get size() {\n        return this.state.length;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    move(key) {\n        switch(key){\n            case \"ArrowUp\":\n                this.moveUp();\n                break;\n            case \"ArrowRight\":\n                this.moveRight();\n                break;\n            case \"ArrowDown\":\n                this.moveDown();\n                break;\n            case \"ArrowLeft\":\n                this.moveLeft();\n                break;\n        }\n        this.placeNewTile();\n        this.updateGameStatus();\n    }\n    handleMove() {\n        for(let col = 0; col < this.size; col++){\n            const numbers = [];\n            for(let row = 0; row < this.size; row++)if (this.state[row][col] !== 0) numbers.push(this.state[row][col]);\n            const merged = [];\n            let i = 0;\n            while(i < numbers.length)if (i + 1 < numbers.length && numbers[i] === numbers[i + 1]) {\n                const stackedNumber = numbers[i] * 2;\n                merged.push(stackedNumber);\n                this.score += stackedNumber;\n                i += 2;\n            } else {\n                merged.push(numbers[i]);\n                i++;\n            }\n            while(merged.length < this.size)merged.push(0);\n            for(let row = 0; row < this.size; row++)this.state[row][col] = merged[row];\n        }\n    }\n    moveUp() {\n        this.handleMove();\n    }\n    moveDown() {\n        this.reverseGrid();\n        this.handleMove();\n        this.reverseGrid();\n    }\n    moveLeft() {\n        this.rotateClockwise();\n        this.handleMove();\n        this.rotateCounterClockwise();\n    }\n    moveRight() {\n        this.rotateCounterClockwise();\n        this.handleMove();\n        this.rotateClockwise();\n    }\n    reverseGrid() {\n        this.state.reverse();\n    }\n    transpose() {\n        for(let i = 0; i < this.size; i++)for(let j = i + 1; j < this.size; j++)[this.state[i][j], this.state[j][i]] = [\n            this.state[j][i],\n            this.state[i][j]\n        ];\n    }\n    rotateClockwise() {\n        this.transpose();\n        this.state.forEach((row)=>row.reverse());\n    }\n    rotateCounterClockwise() {\n        this.state.forEach((row)=>row.reverse());\n        this.transpose();\n    }\n    updateGameStatus() {\n        if (this.checkMovePossibility()) return;\n        this.status = $a5fd07fa01589658$var$Game.STATUS.Lost;\n        for (const row of this.state)if (row.includes(2048)) {\n            this.status = $a5fd07fa01589658$var$Game.STATUS.Won;\n            return;\n        }\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.STATUS.Playing;\n        for(let i = 0; i < this.startTilesAmount; i++)this.placeNewTile();\n    }\n    restart() {\n        this.status = $a5fd07fa01589658$var$Game.STATUS.Idle;\n        this.state = structuredClone($a5fd07fa01589658$var$Game.DEFAULT_BOARD);\n        this.score = 0;\n        this.start();\n    }\n    getTwoOrFour() {\n        return Math.random() < 0.9 ? 2 : 4;\n    }\n    placeNewTile() {\n        const emptyCells = [];\n        for(let row = 0; row < this.size; row++){\n            for(let col = 0; col < this.size; col++)if (this.state[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length > 0) {\n            const randomCellIndex = Math.floor(Math.random() * emptyCells.length);\n            const { row: row, col: col } = emptyCells[randomCellIndex];\n            this.state[row][col] = this.getTwoOrFour();\n        }\n    }\n    checkMovePossibility() {\n        for(let row = 0; row < this.size; row++)for(let col = 0; col < this.size; col++){\n            if (this.state[row][col] === 0) return true;\n        }\n        for(let row = 0; row < this.size; row++)for(let col = 0; col < this.size - 1; col++){\n            if (this.state[row][col] === this.state[row][col + 1]) return true;\n        }\n        for(let col = 0; col < this.size; col++)for(let row = 0; row < this.size - 1; row++){\n            if (this.state[row][col] === this.state[row + 1][col]) return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$gameContainer = document.querySelector(\".container\");\nconst $09e991522ca7e64e$var$actionButton = $09e991522ca7e64e$var$gameContainer.querySelector(\".controls button\");\nconst $09e991522ca7e64e$var$scoreInfo = $09e991522ca7e64e$var$gameContainer.querySelector(\".controls .info\");\nconst $09e991522ca7e64e$var$scoreNumberField = $09e991522ca7e64e$var$gameContainer.querySelector(\".controls .game-score\");\nconst $09e991522ca7e64e$var$gameGrid = $09e991522ca7e64e$var$gameContainer.querySelector(\".game-field tbody\");\nconst $09e991522ca7e64e$var$messageStart = $09e991522ca7e64e$var$gameContainer.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = $09e991522ca7e64e$var$gameContainer.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = $09e991522ca7e64e$var$gameContainer.querySelector(\".message-lose\");\nfunction $09e991522ca7e64e$var$renderGame() {\n    $09e991522ca7e64e$var$updateScoreDisplay();\n    $09e991522ca7e64e$var$updateGameBoard();\n    $09e991522ca7e64e$var$updateGameStatusMessage();\n}\nfunction $09e991522ca7e64e$var$updateScoreDisplay() {\n    $09e991522ca7e64e$var$scoreNumberField.textContent = $09e991522ca7e64e$var$game.getScore();\n}\nfunction $09e991522ca7e64e$var$updateGameStatusMessage() {\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    const isGameIdle = gameStatus === $a5fd07fa01589658$exports.STATUS.Idle;\n    $09e991522ca7e64e$var$messageStart.classList.add($09e991522ca7e64e$var$CLASSNAME.Hidden);\n    $09e991522ca7e64e$var$messageWin.classList.add($09e991522ca7e64e$var$CLASSNAME.Hidden);\n    $09e991522ca7e64e$var$messageLose.classList.add($09e991522ca7e64e$var$CLASSNAME.Hidden);\n    $09e991522ca7e64e$var$actionButton.classList.remove($09e991522ca7e64e$var$CLASSNAME.Restart, $09e991522ca7e64e$var$CLASSNAME.Start);\n    $09e991522ca7e64e$var$actionButton.classList.add(isGameIdle ? $09e991522ca7e64e$var$CLASSNAME.Start : $09e991522ca7e64e$var$CLASSNAME.Restart);\n    $09e991522ca7e64e$var$actionButton.textContent = isGameIdle ? $09e991522ca7e64e$var$LABEL.Start : $09e991522ca7e64e$var$LABEL.Restart;\n    switch(gameStatus){\n        case $a5fd07fa01589658$exports.STATUS.Won:\n            $09e991522ca7e64e$var$messageWin.classList.remove($09e991522ca7e64e$var$CLASSNAME.Hidden);\n            break;\n        case $a5fd07fa01589658$exports.STATUS.Lost:\n            $09e991522ca7e64e$var$messageLose.classList.remove($09e991522ca7e64e$var$CLASSNAME.Hidden);\n            break;\n    }\n}\nfunction $09e991522ca7e64e$var$updateGameBoard() {\n    const grid = $09e991522ca7e64e$var$game.getState();\n    const numRows = $09e991522ca7e64e$var$gameGrid.rows.length;\n    const numCols = $09e991522ca7e64e$var$gameGrid.rows[0].cells.length;\n    for(let rowIndex = 0; rowIndex < numRows; rowIndex++)for(let colIndex = 0; colIndex < numCols; colIndex++){\n        const cell = $09e991522ca7e64e$var$gameGrid.rows[rowIndex].cells[colIndex];\n        const value = grid[rowIndex][colIndex];\n        cell.textContent = value || \"\";\n        cell.className = `field-cell ${value ? `field-cell--${value}` : \"\"}`;\n    }\n}\ndocument.addEventListener(\"keydown\", (ev)=>{\n    if ($a5fd07fa01589658$exports.MOVE_KEYS.includes(ev.key)) {\n        ev.preventDefault();\n        $09e991522ca7e64e$var$game.move(ev.key);\n        $09e991522ca7e64e$var$renderGame();\n    }\n});\n$09e991522ca7e64e$var$actionButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.STATUS.Idle) $09e991522ca7e64e$var$game.start();\n    else $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$renderGame();\n});\n$09e991522ca7e64e$var$scoreInfo.addEventListener(\"click\", ()=>{\n    // eslint-disable-next-line no-console\n    console.log($09e991522ca7e64e$var$game.getScore());\n});\n\n\n//# sourceMappingURL=index.451ac561.js.map\n","'use strict';\n\nconst CLASSNAME = Object.freeze({\n  Start: 'start',\n  Restart: 'restart',\n  Hidden: 'hidden',\n  ActionButton: 'button',\n});\nconst LABEL = Object.freeze({\n  Start: 'Start',\n  Restart: 'Restart',\n});\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst gameContainer = document.querySelector('.container');\nconst actionButton = gameContainer.querySelector('.controls button');\nconst scoreInfo = gameContainer.querySelector('.controls .info');\nconst scoreNumberField = gameContainer.querySelector('.controls .game-score');\nconst gameGrid = gameContainer.querySelector('.game-field tbody');\nconst messageStart = gameContainer.querySelector('.message-start');\nconst messageWin = gameContainer.querySelector('.message-win');\nconst messageLose = gameContainer.querySelector('.message-lose');\n\nfunction renderGame() {\n  updateScoreDisplay();\n  updateGameBoard();\n  updateGameStatusMessage();\n}\n\nfunction updateScoreDisplay() {\n  scoreNumberField.textContent = game.getScore();\n}\n\nfunction updateGameStatusMessage() {\n  const gameStatus = game.getStatus();\n  const isGameIdle = gameStatus === Game.STATUS.Idle;\n\n  messageStart.classList.add(CLASSNAME.Hidden);\n  messageWin.classList.add(CLASSNAME.Hidden);\n  messageLose.classList.add(CLASSNAME.Hidden);\n\n  actionButton.classList.remove(CLASSNAME.Restart, CLASSNAME.Start);\n\n  actionButton.classList.add(isGameIdle ? CLASSNAME.Start : CLASSNAME.Restart);\n  actionButton.textContent = isGameIdle ? LABEL.Start : LABEL.Restart;\n\n  switch (gameStatus) {\n    case Game.STATUS.Won:\n      messageWin.classList.remove(CLASSNAME.Hidden);\n      break;\n    case Game.STATUS.Lost:\n      messageLose.classList.remove(CLASSNAME.Hidden);\n      break;\n  }\n}\n\nfunction updateGameBoard() {\n  const grid = game.getState();\n  const numRows = gameGrid.rows.length;\n  const numCols = gameGrid.rows[0].cells.length;\n\n  for (let rowIndex = 0; rowIndex < numRows; rowIndex++) {\n    for (let colIndex = 0; colIndex < numCols; colIndex++) {\n      const cell = gameGrid.rows[rowIndex].cells[colIndex];\n      const value = grid[rowIndex][colIndex];\n\n      cell.textContent = value || '';\n      cell.className = `field-cell ${value ? `field-cell--${value}` : ''}`;\n    }\n  }\n}\n\ndocument.addEventListener('keydown', (ev) => {\n  if (Game.MOVE_KEYS.includes(ev.key)) {\n    ev.preventDefault();\n    game.move(ev.key);\n    renderGame();\n  }\n});\n\nactionButton.addEventListener('click', () => {\n  if (game.getStatus() === Game.STATUS.Idle) {\n    game.start();\n  } else {\n    game.restart();\n  }\n  renderGame();\n});\n\nscoreInfo.addEventListener('click', () => {\n  // eslint-disable-next-line no-console\n  console.log(game.getScore());\n});\n","'use strict';\n\nclass Game {\n  static START_TILES_QUANTITY_DEFAULT = 2;\n  static DEFAULT_BOARD = Array(4)\n    .fill()\n    .map(() => Array(4).fill(0));\n  static MOVE_KEYS = Object.freeze([\n    'ArrowLeft',\n    'ArrowRight',\n    'ArrowUp',\n    'ArrowDown',\n  ]);\n  static STATUS = Object.freeze({\n    Idle: 'Idle',\n    Playing: 'Playing',\n    Lost: 'Lost',\n    Won: 'Won',\n  });\n\n  status = Game.STATUS.Idle;\n  score = 0;\n\n  constructor(\n    initialState = structuredClone(Game.DEFAULT_BOARD),\n    startTilesAmount = Game.START_TILES_QUANTITY_DEFAULT,\n  ) {\n    this.state = initialState;\n    this.startTilesAmount = startTilesAmount;\n  }\n\n  get size() {\n    return this.state.length;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  move(key) {\n    switch (key) {\n      case 'ArrowUp':\n        this.moveUp();\n        break;\n      case 'ArrowRight':\n        this.moveRight();\n        break;\n      case 'ArrowDown':\n        this.moveDown();\n        break;\n      case 'ArrowLeft':\n        this.moveLeft();\n        break;\n    }\n    this.placeNewTile();\n    this.updateGameStatus();\n  }\n\n  handleMove() {\n    for (let col = 0; col < this.size; col++) {\n      const numbers = [];\n\n      for (let row = 0; row < this.size; row++) {\n        if (this.state[row][col] !== 0) {\n          numbers.push(this.state[row][col]);\n        }\n      }\n\n      const merged = [];\n      let i = 0;\n\n      while (i < numbers.length) {\n        if (i + 1 < numbers.length && numbers[i] === numbers[i + 1]) {\n          const stackedNumber = numbers[i] * 2;\n\n          merged.push(stackedNumber);\n          this.score += stackedNumber;\n          i += 2;\n        } else {\n          merged.push(numbers[i]);\n          i++;\n        }\n      }\n\n      while (merged.length < this.size) {\n        merged.push(0);\n      }\n\n      for (let row = 0; row < this.size; row++) {\n        this.state[row][col] = merged[row];\n      }\n    }\n  }\n\n  moveUp() {\n    this.handleMove();\n  }\n\n  moveDown() {\n    this.reverseGrid();\n    this.handleMove();\n    this.reverseGrid();\n  }\n\n  moveLeft() {\n    this.rotateClockwise();\n    this.handleMove();\n    this.rotateCounterClockwise();\n  }\n\n  moveRight() {\n    this.rotateCounterClockwise();\n    this.handleMove();\n    this.rotateClockwise();\n  }\n\n  reverseGrid() {\n    this.state.reverse();\n  }\n\n  transpose() {\n    for (let i = 0; i < this.size; i++) {\n      for (let j = i + 1; j < this.size; j++) {\n        [this.state[i][j], this.state[j][i]] = [\n          this.state[j][i],\n          this.state[i][j],\n        ];\n      }\n    }\n  }\n\n  rotateClockwise() {\n    this.transpose();\n    this.state.forEach((row) => row.reverse());\n  }\n\n  rotateCounterClockwise() {\n    this.state.forEach((row) => row.reverse());\n    this.transpose();\n  }\n\n  updateGameStatus() {\n    if (this.checkMovePossibility()) {\n      return;\n    }\n    this.status = Game.STATUS.Lost;\n\n    for (const row of this.state) {\n      if (row.includes(2048)) {\n        this.status = Game.STATUS.Won;\n\n        return;\n      }\n    }\n  }\n\n  start() {\n    this.status = Game.STATUS.Playing;\n\n    for (let i = 0; i < this.startTilesAmount; i++) {\n      this.placeNewTile();\n    }\n  }\n\n  restart() {\n    this.status = Game.STATUS.Idle;\n    this.state = structuredClone(Game.DEFAULT_BOARD);\n    this.score = 0;\n    this.start();\n  }\n\n  getTwoOrFour() {\n    return Math.random() < 0.9 ? 2 : 4;\n  }\n\n  placeNewTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.state[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomCellIndex = Math.floor(Math.random() * emptyCells.length);\n      const { row, col } = emptyCells[randomCellIndex];\n\n      this.state[row][col] = this.getTwoOrFour();\n    }\n  }\n\n  checkMovePossibility() {\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.state[row][col] === 0) {\n          return true;\n        }\n      }\n    }\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size - 1; col++) {\n        if (this.state[row][col] === this.state[row][col + 1]) {\n          return true;\n        }\n      }\n    }\n\n    for (let col = 0; col < this.size; col++) {\n      for (let row = 0; row < this.size - 1; row++) {\n        if (this.state[row][col] === this.state[row + 1][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$CLASSNAME","Object","freeze","Start","Restart","Hidden","ActionButton","$09e991522ca7e64e$var$LABEL","$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","START_TILES_QUANTITY_DEFAULT","DEFAULT_BOARD","Array","fill","map","MOVE_KEYS","STATUS","Idle","Playing","Lost","Won","status","score","constructor","initialState","structuredClone","startTilesAmount","state","size","length","getScore","getState","getStatus","move","key","moveUp","moveRight","moveDown","moveLeft","placeNewTile","updateGameStatus","handleMove","col","numbers","row","push","merged","i","stackedNumber","reverseGrid","rotateClockwise","rotateCounterClockwise","reverse","transpose","j","forEach","checkMovePossibility","includes","start","restart","getTwoOrFour","Math","random","emptyCells","randomCellIndex","floor","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$gameContainer","document","querySelector","$09e991522ca7e64e$var$actionButton","$09e991522ca7e64e$var$scoreInfo","$09e991522ca7e64e$var$scoreNumberField","$09e991522ca7e64e$var$gameGrid","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$renderGame","textContent","$09e991522ca7e64e$var$updateGameBoard","grid","numRows","rows","numCols","cells","rowIndex","colIndex","cell","value","className","$09e991522ca7e64e$var$updateGameStatusMessage","gameStatus","isGameIdle","classList","add","remove","addEventListener","ev","preventDefault","console","log"],"version":3,"file":"index.451ac561.js.map"}